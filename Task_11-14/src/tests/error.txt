============================================================= FAILURES ============================================================== 
________________________________________________________ test_repeat_signup _________________________________________________________ 

client = <starlette.testclient.TestClient object at 0x0000019F61075950>
monkeypatch = <_pytest.monkeypatch.MonkeyPatch object at 0x0000019F6111C150>

    def test_repeat_signup(client, monkeypatch):
        mock_send_email = Mock()
        monkeypatch.setattr("src.routes.auth.send_email", mock_send_email)
>       response = client.post("api/auth/signup", json=user_data)

src\tests\test_e2e_auth.py:33:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
.venv\Lib\site-packages\starlette\testclient.py:633: in post
    return super().post(
.venv\Lib\site-packages\httpx\_client.py:1145: in post
    return self.request(
.venv\Lib\site-packages\starlette\testclient.py:516: in request
    return super().request(
.venv\Lib\site-packages\httpx\_client.py:827: in request
    return self.send(request, auth=auth, follow_redirects=follow_redirects)
.venv\Lib\site-packages\httpx\_client.py:914: in send
    response = self._send_handling_auth(
.venv\Lib\site-packages\httpx\_client.py:942: in _send_handling_auth
    response = self._send_handling_redirects(
.venv\Lib\site-packages\httpx\_client.py:979: in _send_handling_redirects
    response = self._send_single_request(request)
.venv\Lib\site-packages\httpx\_client.py:1015: in _send_single_request
    response = transport.handle_request(request)
.venv\Lib\site-packages\starlette\testclient.py:398: in handle_request
    raise exc
.venv\Lib\site-packages\starlette\testclient.py:395: in handle_request
    portal.call(self.app, scope, receive, send)
.venv\Lib\site-packages\anyio\from_thread.py:288: in call
    return cast(T_Retval, self.start_task_soon(func, *args).result())
C:\Program Files\WindowsApps\PythonSoftwareFoundation.Python.3.11_3.11.2544.0_x64__qbz5n2kfra8p0\Lib\concurrent\futures\_base.py:456: in result
    return self.__get_result()
C:\Program Files\WindowsApps\PythonSoftwareFoundation.Python.3.11_3.11.2544.0_x64__qbz5n2kfra8p0\Lib\concurrent\futures\_base.py:401: in __get_result
    raise self._exception
.venv\Lib\site-packages\anyio\from_thread.py:217: in _call_func
    retval = await retval_or_awaitable
.venv\Lib\site-packages\fastapi\applications.py:1054: in __call__
    await super().__call__(scope, receive, send)
.venv\Lib\site-packages\starlette\applications.py:123: in __call__
    await self.middleware_stack(scope, receive, send)
.venv\Lib\site-packages\starlette\middleware\errors.py:186: in __call__
    raise exc
.venv\Lib\site-packages\starlette\middleware\errors.py:164: in __call__
    await self.app(scope, receive, _send)
.venv\Lib\site-packages\starlette\middleware\cors.py:85: in __call__
    await self.app(scope, receive, send)
.venv\Lib\site-packages\starlette\middleware\exceptions.py:65: in __call__
    await wrap_app_handling_exceptions(self.app, conn)(scope, receive, send)
.venv\Lib\site-packages\starlette\_exception_handler.py:64: in wrapped_app
    raise exc
.venv\Lib\site-packages\starlette\_exception_handler.py:53: in wrapped_app
    await app(scope, receive, sender)
.venv\Lib\site-packages\starlette\routing.py:756: in __call__
    await self.middleware_stack(scope, receive, send)
.venv\Lib\site-packages\starlette\routing.py:776: in app
    await route.handle(scope, receive, send)
.venv\Lib\site-packages\starlette\routing.py:297: in handle
    await self.app(scope, receive, send)
.venv\Lib\site-packages\starlette\routing.py:77: in app
    await wrap_app_handling_exceptions(app, request)(scope, receive, send)
.venv\Lib\site-packages\starlette\_exception_handler.py:64: in wrapped_app
    raise exc
.venv\Lib\site-packages\starlette\_exception_handler.py:53: in wrapped_app
    await app(scope, receive, sender)
.venv\Lib\site-packages\starlette\routing.py:72: in app
    response = await func(request)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

request = <starlette.requests.Request object at 0x0000019F6119FFD0>

    async def app(request: Request) -> Response:
        response: Union[Response, None] = None
        async with AsyncExitStack() as file_stack:
            try:
                body: Any = None
                if body_field:
                    if is_body_form:
                        body = await request.form()
                        file_stack.push_async_callback(body.close)
                    else:
                        body_bytes = await request.body()
                        if body_bytes:
                            json_body: Any = Undefined
                            content_type_value = request.headers.get("content-type")
                            if not content_type_value:
                                json_body = await request.json()
                            else:
                                message = email.message.Message()
                                message["content-type"] = content_type_value
                                if message.get_content_maintype() == "application":
                                    subtype = message.get_content_subtype()
                                    if subtype == "json" or subtype.endswith("+json"):
                                        json_body = await request.json()
                            if json_body != Undefined:
                                body = json_body
                            else:
                                body = body_bytes
            except json.JSONDecodeError as e:
                validation_error = RequestValidationError(
                    [
                        {
                            "type": "json_invalid",
                            "loc": ("body", e.pos),
                            "msg": "JSON decode error",
                            "input": {},
                            "ctx": {"error": e.msg},
                        }
                    ],
                    body=e.doc,
                )
                raise validation_error from e
            except HTTPException:
                # If a middleware raises an HTTPException, it should be raised again
                raise
            except Exception as e:
                http_error = HTTPException(
                    status_code=400, detail="There was an error parsing the body"
                )
                raise http_error from e
            errors: List[Any] = []
            async with AsyncExitStack() as async_exit_stack:
                solved_result = await solve_dependencies(
                    request=request,
                    dependant=dependant,
                    body=body,
                    dependency_overrides_provider=dependency_overrides_provider,
                    async_exit_stack=async_exit_stack,
                )
                values, errors, background_tasks, sub_response, _ = solved_result
                if not errors:
                    raw_response = await run_endpoint_function(
                        dependant=dependant, values=values, is_coroutine=is_coroutine
                    )
                    if isinstance(raw_response, Response):
                        if raw_response.background is None:
                            raw_response.background = background_tasks
                        response = raw_response
                    else:
                        response_args: Dict[str, Any] = {"background": background_tasks}
                        # If status_code was set, use it, otherwise use the default from the
                        # response class, in the case of redirect it's 307
                        current_status_code = (
                            status_code if status_code else sub_response.status_code
                        )
                        if current_status_code is not None:
                            response_args["status_code"] = current_status_code
                        if sub_response.status_code:
                            response_args["status_code"] = sub_response.status_code
                        content = await serialize_response(
                            field=response_field,
                            response_content=raw_response,
                            include=response_model_include,
                            exclude=response_model_exclude,
                            by_alias=response_model_by_alias,
                            exclude_unset=response_model_exclude_unset,
                            exclude_defaults=response_model_exclude_defaults,
                            exclude_none=response_model_exclude_none,
                            is_coroutine=is_coroutine,
                        )
                        response = actual_response_class(content, **response_args)
                        if not is_body_allowed_for_status_code(response.status_code):
                            response.body = b""
                        response.headers.raw.extend(sub_response.headers.raw)
            if errors:
                validation_error = RequestValidationError(
                    _normalize_errors(errors), body=body
                )
                raise validation_error
        if response is None:
>           raise FastAPIError(
                "No response object was returned. There's a high chance that the "
                "application code is raising an exception and a dependency with yield "
                "has a block with a bare except, or a block with except Exception, "
                "and is not raising the exception again. Read more about it in the "
                "docs: https://fastapi.tiangolo.com/tutorial/dependencies/dependencies-with-yield/#dependencies-with-yield-and-except"
            )
E           fastapi.exceptions.FastAPIError: No response object was returned. There's a high chance that the application code is raising an exception and a dependency with yield has a block with a bare except, or a block with except Exception, and is not raising the exception again. Read more about it in the docs: https://fastapi.tiangolo.com/tutorial/dependencies/dependencies-with-yield/#dependencies-with-yield-and-except

.venv\Lib\site-packages\fastapi\routing.py:317: FastAPIError
------------------------------------------------------- Captured stdout call -------------------------------------------------------- 
409: Account already exists


---------- coverage: platform win32, python 3.11.9-final-0 -----------
Name                                         Stmts   Miss  Cover
----------------------------------------------------------------
__init__.py                                      0      0   100%
main.py                                         46     13    72%
src\conf\config.py                              28      1    96%
src\conf\messages.py                             6      0   100%
src\database\db.py                              19      8    58%
src\entity\models.py                            28      0   100%
src\repository\contacts.py                      39      0   100%
src\repository\users.py                         36     11    69%
src\routes\auth.py                              64     41    36%
src\routes\contacts.py                          33     14    58%
src\routes\users.py                             24      6    75%
src\schemas\contact.py                          21      0   100%
src\schemas\user.py                             18      0   100%
src\services\auth.py                            84     43    49%
src\services\email.py                           15      7    53%
src\tests\conftest.py                           42      0   100%
src\tests\test_e2e_auth.py                      59     12    80%
src\tests\test_e2e_contacts.py                  13      3    77%
src\tests\test_unit_repository_contacts.py      56      0   100%
src\tests\test_unit_repository_users.py         18      0   100%
----------------------------------------------------------------
TOTAL                                          649    159    76%

====================================================== short test summary info ======================================================
FAILED src/tests/test_e2e_auth.py::test_repeat_signup - fastapi.exceptions.FastAPIError: No response object was returned. There's a high chance that the application code is raising an e...
FAILED src/tests/test_e2e_auth.py::test_not_confirmed_login - fastapi.exceptions.FastAPIError: No response object was returned. There's a high chance that the application code is raising an e...
FAILED src/tests/test_e2e_auth.py::test_login_with_wrong_password - fastapi.exceptions.FastAPIError: No response object was returned. There's a high chance that the application code is raising an e...
FAILED src/tests/test_e2e_auth.py::test_login_with_wrong_email - fastapi.exceptions.FastAPIError: No response object was returned. There's a high chance that the application code is raising an e...
FAILED src/tests/test_e2e_contacts.py::test_get_contacts - Exception: You must call FastAPILimiter.init in startup event of fastapi!  
==================================================== 5 failed, 9 passed in 5.63s ==================================================== 